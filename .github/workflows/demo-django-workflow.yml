name: djangoapp

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  ci-checks:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./myapp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Install dependencies
        run: |
          whoami
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyjwt

      - name: Run Django tests
        run: python manage.py test

  # build-and-scan-image:
  #   needs: ci-checks
  #   runs-on: self-hosted
  #   defaults:
  #     run:
  #       working-directory: ./myapp
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Build application
  #       run: docker compose build

  #     - name: List images
  #       run: docker images

      # - name: Scan my-app image with Trivy
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: 'myapp-web'
      #     output: trivy-report.txt
      #     format: 'table'
      #     exit-code: '0'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      # - uses: actions/upload-artifact@v4
      #   name: Upload trivy report
      #   with:
      #     name: trivy-report
      #     path: ./trivy-report.txt

  push-to-ecr:
    needs: ci-checks
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./myapp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build application
        id: build-image
        env:
          ECR_REGISTRY: ${{ .steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: myapp-web
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  # deploy:
  #   needs: build-and-scan-image
  #   runs-on: self-hosted
  #   defaults:
  #     run:
  #       working-directory: ./myapp
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Build and deploy application
  #       run: docker compose up -d
